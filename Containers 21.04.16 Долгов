// Containers.cpp: определяет точку входа для консольного приложения

#include "stdafx.h"
#include <ctime>
#include <iostream>
#include <vector>
using namespace std;

int main() {
	srand(time(NULL));
	int n = 10;
	vector< int > v; //Создание вектора, являющегося контейнером для объектов типа int
	v.push_back(10); //Добавление элемента в конец вектора
	for (int i = 0; i < n; i++)  // capasity Должно быть >= size ;
	{
		v.push_back(rand() % 10);
		cout << v.size();
		cout << v.capacity();
		cout << endl;
	}
	// reserve
	v.reserve(10000);
	double d = clock();
	for (int i = 0; i < 10000; i++)
	{
		v.push_back(rand() % 10);
		v.pop_back();
	}
	cout << "time:" << clock() - d << endl;
	// Без reserve
	vector< int > s;
	double e = clock();
	for (int i = 0; i < 10000; i++)
	{
		s.push_back(rand() % 10);
		s.pop_back();
	}
	cout << "time:" << clock() - e << endl;

	//v.pop_back();//Удаление последнего элемента из вектора
	v[0] = 13; //Присвоение элементу номер 0 значения 13.
			   //Проверок на выход за границы массива в таком варианте обращения по индексу нет
			   //Если будет выход за границы, то произойдет попытка обратиться к элементу по указанному индексу
			   //и, если нет прав доступа, то прервется выполнение программы, а если есть - будет выдано содержимое той ячейки
	v.at(0) = 14; //Присвоение элементу номер 0 значения 14. Содержит проверку на выход за границы массива.
				  //Если присутствует попытка обратиться к элементу за границами - бросает exception
	size_t size = v.size(); //Функция возвращает количество элементов в векторе
	bool isEmpty = v.empty(); //Если вектор пуст, возвращает true, в противном случае false
	v.clear(); //Функция удаляет все элементы вектора
	v.resize(10); //Функция изменяет размер вектора
				  //Работает только если есть конструктор по умолчанию
	v.resize(20, 5); //Добавленные объекты будут равны 5
	for (int i = 0; i < v.size(); i++)              //vivod;
		cout << v.at(i) << " ";
	cout << endl;
	system("pause");

	//Освобождение памяти (delete) для векторов
	//SWAPTRICK hack
	cout << v.capacity();
	vector <int>(v).swap(v);
	cout << endl;
	cout << v.capacity();
	system("pause");
}

