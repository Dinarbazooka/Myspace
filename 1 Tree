#include "stdafx.h"
#include <iostream>
#include <queue>              //Очередь
#include <stack>              //Стек
#include <ctime>
using namespace std;

template <class T>
class Tree
{
	class Node
	{
		friend class Tree;
		int info;
	public:
		Node *left, *right, *parent;
		Node(int pinfo = 0, Node *pright = NULL, Node *pleft = NULL, Node *pparent = NULL)
		{
			info = pinfo;
			pright = right;
			pleft = left;
			pparent = parent;
		}
		void Print()
		{
			cout << info << " ";
			cout << endl;
		}
	};
	public:
		Node* root;
		Tree()                           //конструктор                                                             
		{
			root = NULL;
		}
		~Tree()                           //Деструктор
		{
			DelTree(root);
			cout << " Дерево удалено. " << endl;
		}
		// Свойства (Доступ) 
		int Print()
		{
			return Print(root);
		}
		int MaxDistance()
		{
			return MaxDistance(root);
		}
		int SumElements()
		{
			return SumElements(root);
		}
		bool AddVozrastanie(int x)
		{
			return AddVozrastanie(root, x);
		}
		void PrintByLevel()
		{
			return PrintByLevel(root);
		}
	private:
		void DelTree(Node * root)            //Функция удаления всего дерева
		{
			if (root == NULL) return;
			DelTree(root->left);
			DelTree(root->right);
			delete root;
		}
		int Print(Node * root)               // возвращает количество узлов.
		{
			if (root == NULL) return 0;
			else
			{
				int l = Print(root->left);
				root->Print();
				int r = Print(root->right);
				return r + l + 1;
			}
		}
		int MaxDistance(Node *root)    // возвращает максимальное расстояние от самого нижнего элемента до корня, по уровням
		{
			if (root == NULL) return 0;
			else
			{
				int l = MaxDistance(root->left);
				int r = MaxDistance(root->right);
				return l + r + 1;
			}
		}
		int SumElements(Node *root)        //Сумма элементов во всех узлах
		{
			if (root == NULL) return 0;
			else
			{
				int l = SumElements(root->left);
				int r = SumElements(root->right);
				return r + l + root->info;
			}
		}
		bool AddVozrastanie(Node *&root/* & Почему-то! */, int x)     // Функция добавляет по возрастанию
		{
			if (root == NULL)
			{
				Node * r = new Node(x, root);
				return true;
			}
			if (root->info == x) return false;
			if (root->info > x) return AddVozrastanie(root->left, x);
			else
			{
				return AddVozrastanie(root->right, x);
			}


		}
		void PrintByLevel(Node *root)       //печать по уровням, ОЧЕРЕДЬ
		{
			if (root == NULL) return;
			queue < Node*> q;
			q.push(root);
			for (; !q.empty();)
			{
				Node *root = q.front();
				q.pop();
				root->Print();
				if (root->left != NULL) q.push(root->left);
				if (root->right != NULL) q.push(root->right);
			}
			cout << endl;
		}
		Node RFind(Node *r, int x)
		{
			if (r == NULL) { return 0; }
			if (r->info == x) { return r; }
			Node *p = RFind(r->left, x);
			if (p != NULL) { return p; }
			return RFind(r->right, x);
			stack <Node*> st;
			bool canleft = true;
			for (Node *p = root; p != NULL;)
			{
				if (canleft && p->left != NULL)
				{
					st.push(p);
					p = p->left;
				}
				else
				{
					p->Print();
					if (p->right != NULL)
					{
						p = p->right;
						canleft = true;
					}
					else
					{
						if (!st.empty())
						{
							p = st.top();
							st.pop();
							canleft = false;
						}
						else break;
					}
				}
			}
		}
};

int main()
{
	setlocale(LC_ALL, "Russian");
	srand(time(NULL));
	Tree<int> der;
	cout << endl;
	int q = 100;
	for (int i = 0; i < q; i++)
		der.AddVozrastanie(rand() % 50);
	der.Print();
	cout << endl;
	der.PrintByLevel();
	cout << endl;
	system("pause");
}
